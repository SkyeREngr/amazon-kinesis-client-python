# This workflow will trigger on pushes and pull requests to master branch
# sample_run uses matrix to create unique combinations of operating systems and python versions
# each of the unique runs downloads the jars needed to run the KCL, runs the sample_kinesis_wordputter.py, and use a timeout command to run the sample_kclpy_app.py
# auto_merge uses GitHub events to check if dependabot is the pull requester, and if the request fits the criteria the PR is automatically merged

name: Sample Run Tests and Dependabot
on:
  push:
    branches: [ master, sample-improve ]
  pull_request_target:
    branches: [ master, sample-improve ]
    types: [opened, synchronize, reopened, labeled, unlabeled]

jobs:
  # Evaluates if the workflow should run. If the workflow is triggered by a push OR
  # is triggered by a pull request without the 'skip-sample-tests' label, the workflow should run.
  # Otherwise, the workflow will be skipped
  check-if-should-run:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request_target' && !contains(github.event.pull_request.labels.*.name, 'skip-sample-tests')) }}
    outputs:
      should_run: 'true'
      is_fork: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.fork }}
    steps:
      - run: echo "Evaluating workflow conditions"

  # Workflow will pause and wait here if it is triggered by a fork PR. The workflow will continue to wait until
  # an approved member of the environment 'manual_approval' allows the workflow to run
  wait-for-approval:
    needs: [ check-if-should-run ]
    if: ${{ needs.check-if-should-run.outputs.is_fork == 'true' }}
    runs-on: ubuntu-latest
    environment: manual-approval
    steps:
      - run: echo "Fork PR approved by a team member."

  # Sample run tests of the KCL
  sample-run:
    needs: [ check-if-should-run, wait-for-approval ]
    permissions:
      id-token: write
    if: ${{ always() && needs.check-if-should-run.outputs.should_run == 'true' && (needs.check-if-should-run.outputs.is_fork != 'true' || needs.wait-for-approval.result == 'success') }}
    timeout-minutes: 8
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.11" ]
        jdk-version: [ "8", "24" ]
        os: [ ubuntu-latest, macOS-latest, windows-latest ]

    steps:
      # For pull_request_target, checkout PR head instead of merge commit
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.ref }}

      # Configure AWS Credentials. Role session name is unique to avoid OIDC errors when running heavy tests
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ARN_GHA }}
          role-session-name: GHA-${{ github.run_id }}-${{ matrix.python-version }}-${{ matrix.jdk-version }}-${{ matrix.os }}

      - name: Set up JDK ${{ matrix.jdk-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: 'corretto'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pip and requirements
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install --no-cache-dir -r requirements.txt -r test_requirements.txt

      - name: Test with Pytest
        run: |
          python -m pytest

      - name: Install .jar files
        run: |
          python setup.py download_jars
          python setup.py install
        env:
          KCL_MVN_REPO_SEARCH_URL: https://repo1.maven.org/maven2/

      - name: Set up unique identifiers
        run: |
          STREAM_NAME="kclpysample-${{ github.run_id }}-${{ matrix.os }}-py${{ matrix.python-version }}-jdk${{ matrix.jdk-version }}"
          APP_NAME="PythonKCLSample-${{ github.run_id }}-${{ matrix.os }}-py${{ matrix.python-version }}-jdk${{ matrix.jdk-version }}"
          echo "Using stream name: $STREAM_NAME"
          echo "Using application name: $APP_NAME"
          echo "STREAM_NAME=$STREAM_NAME" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      # Create stream and wait for it to become active
      - name: Create and verify Kinesis stream
        run: |
          aws kinesis create-stream --stream-name ${{ env.STREAM_NAME }} --shard-count 1
          aws kinesis wait stream-exists --stream-name ${{ env.STREAM_NAME }}

      # Put words to sample stream with unique name based on run ID
      - name: Put words to sample stream
        run: |
          sample_kinesis_wordputter.py --stream $STREAM_NAME -w cat -w dog -w bird -w lobster -w octopus

      # Run KCL application for 45 seconds, 'exit success' if timeout is reached (exit 124), 'exit failure' otherwise
      - name: Start KCL application (windows or ubuntu)
        if: matrix.os  != 'macOS-latest'
        run: |
          set -o pipefail
          sed -i "s/kclpysample/${{ env.STREAM_NAME }}/g" samples/sample.properties
          sed -i "s/PythonKCLSample/${{ env.APP_NAME }}/g" samples/sample.properties
          
          echo "=== STREAM RECORDS ==="
          SHARD_ITERATOR=$(aws kinesis get-shard-iterator --stream-name ${{ env.STREAM_NAME }} --shard-id shardId-000000000000 --shard-iterator-type TRIM_HORIZON --query 'ShardIterator' --output text)
          aws kinesis get-records --shard-iterator $SHARD_ITERATOR
          
          echo "=== GETTING INITIAL SHARD POSITION ==="
          SHARD_ITERATOR_BEFORE=$(aws kinesis get-shard-iterator --stream-name ${{ env.STREAM_NAME }} --shard-id shardId-000000000000 --shard-iterator-type TRIM_HORIZON --query 'ShardIterator' --output text)
          RECORDS_BEFORE=$(aws kinesis get-records --shard-iterator $SHARD_ITERATOR_BEFORE --limit 10)
          NEXT_ITERATOR_BEFORE=$(echo $RECORDS_BEFORE | jq -r '.NextShardIterator')
          
          echo "=== VERIFYING RECORDS IN STREAM ==="
          SHARD_ITERATOR=$(aws kinesis get-shard-iterator --stream-name ${{ env.STREAM_NAME }} --shard-id shardId-000000000000 --shard-iterator-type TRIM_HORIZON --query 'ShardIterator' --output text)
          INITIAL_RECORDS=$(aws kinesis get-records --shard-iterator $SHARD_ITERATOR)
          RECORD_COUNT_BEFORE=$(echo $INITIAL_RECORDS | jq '.Records | length')
          
          if [ "$RECORD_COUNT_BEFORE" -eq 0 ]; then
            echo "No records found in stream. Test cannot proceed."
            exit 1
          fi
          
          echo "Found $RECORD_COUNT_BEFORE records in stream before KCL start"
          NEXT_ITERATOR_BEFORE=$(echo $INITIAL_RECORDS | jq -r '.NextShardIterator')
          
          echo "=== STARTING KCL APPLICATION ==="
          KCL_COMMAND=$(amazon_kclpy_helper.py --print_command --java $(which java) --properties samples/sample.properties)
          timeout 90 $KCL_COMMAND 2>&1 | tee kcl_output.log || [ $? -eq 124 ]
          
          echo "=== CHECKING DDB FOR RECORD CONSUMPTION ==="
          CHECKPOINT_EXISTS=$(aws dynamodb scan --table-name ${{ env.APP_NAME }} --select "COUNT" --filter-expression "attribute_exists(checkpoint)" --query "Count" --output text || echo "0")
          
          if [ "$CHECKPOINT_EXISTS" -gt 0 ]; then
            echo "Found checkpoints in DynamoDB - records were consumed"
          fi
          
          echo "=== CHECKING FOR SHARD ITERATOR POSITION CHANGES ==="
          SHARD_ITERATOR_AFTER=$(aws kinesis get-shard-iterator --stream-name ${{ env.STREAM_NAME }} --shard-id shardId-000000000000 --shard-iterator-type TRIM_HORIZON --query 'ShardIterator' --output text)
          RECORDS_AFTER=$(aws kinesis get-records --shard-iterator $SHARD_ITERATOR_AFTER --limit 10)
          RECORD_COUNT_AFTER=$(echo $RECORDS_AFTER | jq '.Records | length')
          NEXT_ITERATOR_AFTER=$(echo $RECORDS_AFTER | jq -r '.NextShardIterator')
          
          echo "Found $RECORDS_COUNT_AFTER records in stream after KCL run"
          
          if [ "$RECORD_COUNT_AFTER" -lt "$RECORD_COUNT_BEFORE" ]; then
            echo "Record count decreased from $RECORD_COUNT_BEFORE to $RECORD_COUNT_AFTER - records were consumed"
          else
            echo "No evidence of record consumption. Test failed."
          fi
          
          if [ "$CHECKPOINT_EXISTS" -gt 0 ]; then
            echo "But found checkpoints in DynamoDB - records were likely consumed"
            exit 0
          fi
          
          if [ "$NEXT_ITERATOR_BEFORE" != "$NEXT_ITERATOR_AFTER" ]; then
            echo "Shard iterator position changed - records were consumed"
          else
            echo "No change in shard iterator position"
          fi

      # Run KCL application for 45 seconds, 'exit success' if timeout is reached (exit 124), 'exit failure' otherwise
      - name: Start KCL application (macOS)
        if: matrix.os  == 'macOS-latest'
        run: |
          set -o pipefail
          brew install coreutils
          sed -i "" "s/kclpysample/${{ env.STREAM_NAME }}/g" samples/sample.properties
          sed -i "" "s/PythonKCLSample/${{ env.APP_NAME }}/g" samples/sample.properties
          
          echo "=== STREAM RECORDS ==="
          SHARD_ITERATOR=$(aws kinesis get-shard-iterator --stream-name ${{ env.STREAM_NAME }} --shard-id shardId-000000000000 --shard-iterator-type TRIM_HORIZON --query 'ShardIterator' --output text)
          aws kinesis get-records --shard-iterator $SHARD_ITERATOR
          
          echo "=== GETTING INITIAL SHARD POSITION ==="
          SHARD_ITERATOR_BEFORE=$(aws kinesis get-shard-iterator --stream-name ${{ env.STREAM_NAME }} --shard-id shardId-000000000000 --shard-iterator-type TRIM_HORIZON --query 'ShardIterator' --output text)
          RECORDS_BEFORE=$(aws kinesis get-records --shard-iterator $SHARD_ITERATOR_BEFORE --limit 10)
          NEXT_ITERATOR_BEFORE=$(echo $RECORDS_BEFORE | jq -r '.NextShardIterator')
          
          KCL_COMMAND=$(amazon_kclpy_helper.py --print_command --java $(which java) --properties samples/sample.properties)
          gtimeout 90 $KCL_COMMAND 2>&1 | tee kcl_output.log  || [ $? -eq 124 ]

          echo "=== CHECKING FOR SHARD POSITION CHANGES ==="
          SHARD_ITERATOR_AFTER=$(aws kinesis get-shard-iterator --stream-name ${{ env.STREAM_NAME }} --shard-id shardId-000000000000 --shard-iterator-type TRIM_HORIZON --query 'ShardIterator' --output text)
          RECORDS_AFTER=$(aws kinesis get-records --shard-iterator $SHARD_ITERATOR_AFTER --limit 10)
          NEXT_ITERATOR_AFTER=$(echo $RECORDS_AFTER | jq -r '.NextShardIterator')
          
          if [ "$NEXT_ITERATOR_BEFORE" != "$NEXT_ITERATOR_AFTER" ]; then
            echo "Shard iterator position changed - records were consumed"
          else
            echo "No change in shard iterator position"
          fi

      - name: Clean up Kinesis Stream and DynamoDB table
        if: always()
        run: |
          echo "Cleaning up stream ${{ env.STREAM_NAME }}"
          aws kinesis delete-stream --stream-name ${{ env.STREAM_NAME }} || true

          echo "Cleaning up DynamoDB table"
          aws dynamodb delete-table --table-name ${{ env.APP_NAME }} || true

  auto-merge-dependabot:
    needs: [ sample-run ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]' && github.event.pull_request.user.login == 'dependabot[bot]' }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Fetch Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          alert-lookup: true
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Approve PR
        if: steps.metadata.outputs.update-type != 'version-update:semver-major'
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}

#      # update permissions to 'contents: write' when enabled
#      - name: Enable auto-merge for Dependabot PRs
#        if: steps.metadata.outputs.update-type != 'version-update:semver-major'
#        run: gh pr merge --auto --merge "$PR_URL"
#        env:
#          PR_URL: ${{github.event.pull_request.html_url}}
#          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
