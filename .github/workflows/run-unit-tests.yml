# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: UnitTestCoverage
on:
  push:
    branches: [ master, java-build-tests ]
  pull_request:
    branches: [ master ]

permissions:
  id-token: write
  contents: read

jobs:
#  build:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: [3.8, 3.9, "3.10", 3.11]
#        os: [ubuntu-latest, macOS-latest, windows-latest ]
#    steps:
#    - uses: actions/checkout@v2
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v2
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install -r test_requirements.txt
#    - name: Test with pytest
#      run: |
#        pytest

  running_sample:
    # needs: [build]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
#        python-version: [ 3.8, 3.9, "3.10", 3.11 ]
#        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        python-version: [ "3.10", 3.11 ]
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_GHWF }}
          role-session-name: myGitHubActions

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'corretto'

      - name: Install Python and required pips
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r test_requirements.txt
          pip install build

      - name: Test with pytest
        run: python -m pytest

      - name: Install jar files
        run: |
          python -m pip install .
          python -m build
          python setup.py download_jars
          python setup.py install

      #working as intended
      - name: Put words to sample stream (windows)
        if: matrix.os == 'windows-latest'
        working-directory: ./samples
        run: |
          python sample_kinesis_wordputter.py --stream kclpysample -w cat -w dog -w bird -w lobster -w octopus

      #working as intended
      - name: Put words to sample stream (non-windows)
        if: matrix.os != 'windows-latest'
        run: |
          sample_kinesis_wordputter.py --stream kclpysample -w cat -w dog -w bird -w lobster -w octopus

      #WIP
      #Find Windows alternative to $( ) ->
      #Find Windows alternative to timeout command (if necessary)
      - name: Start KCL application windows
        timeout-minutes: 2
        if: matrix.os  == 'windows-latest'
        # working-directory: ./samples
        run: |
          echo $PATH
          timeout 30 $(amazon_kclpy_helper.py --print_command --java $(which java) --properties samples/sample.properties) || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
        # continue-on-error: true

      #working as intended
      - name: Start KCL application ubuntu
        if: matrix.os  == 'ubuntu-latest'
        run: timeout 30 $(amazon_kclpy_helper.py --print_command --java $(which java) --properties samples/sample.properties) || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

      #working as intended
      - name: Start KCL application macOS
        if: matrix.os  == 'macOS-latest'
        run: |
          brew install coreutils
          gtimeout 30 $(amazon_kclpy_helper.py --print_command --java $(which java) --properties samples/sample.properties) || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
